{"version":3,"file":"static/js/pc-finder.worker.4e19e784.worker.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","constants/minodata.ts","scripts/util.ts","scripts/pc-finder.worker.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nexport default function _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","export const minoTypes = {\r\n    \"I\": [[-1, 0], [ 0, 0], [ 1, 0], [ 2, 0]],\r\n\r\n    \"O\": [         [ 0, 1], [ 1, 1], \r\n                   [ 0, 0], [ 1, 0]],\r\n\r\n    \"T\": [         [ 0, 1], \r\n          [-1, 0], [ 0, 0], [ 1, 0]],\r\n\r\n    \"L\": [                  [ 1, 1], \r\n          [-1, 0], [ 0, 0], [ 1, 0]],\r\n\r\n    \"J\": [[-1, 1], \r\n          [-1, 0], [ 0, 0], [ 1, 0]],\r\n\r\n    \"Z\": [[-1, 1], [ 0, 1], \r\n                   [ 0, 0], [ 1, 0]],\r\n\r\n    \"S\": [         [ 0, 1], [ 1, 1], \r\n          [-1, 0], [ 0, 0]],\r\n};\r\n\r\n\r\n// SRS\r\nexport const srsOffsets = {\r\n    I: [\r\n        [[ 0, 0], [-1, 0], [+2, 0], [-1, 0], [+2, 0]],\r\n        [[-1, 0], [ 0, 0], [ 0, 0], [ 0,+1], [ 0,-2]],\r\n        [[-1, +1], [+1,+1], [-2,+1], [+1, 0], [-2, 0]],\r\n        [[ 0,+1], [ 0,+1], [ 0,+1], [ 0,-1], [ 0,+2]]\r\n    ],\r\n    O: [\r\n        [[ 0, 0]],\r\n        [[ 0,-1]],\r\n        [[-1,-1]],\r\n        [[-1, 0]]\r\n    ],\r\n    T: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n    L: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n    J: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n    Z: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n    S: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n};\r\n\r\n// used for blocksheet:\r\n// enum minoIndexes {\r\n//     'I',\r\n//     'O',\r\n//     'T',\r\n//     'L',\r\n//     'J',\r\n//     'Z',\r\n//     'S',\r\n//     'G'\r\n// };\r\nexport const minoIndexes = {\r\n    'I': 0,\r\n    'O': 1,\r\n    'T': 2,\r\n    'L': 3,\r\n    'J': 4,\r\n    'Z': 5,\r\n    'S': 6,\r\n    'G': 7\r\n};\r\n\r\nexport const blocksize = 32;\r\n","import { minoTypes, minoIndexes, blocksize } from \"../constants/minodata\";\r\n\r\nimport { Mino, minoType, Blocks } from \"../types/types\";\r\n\r\nimport blocksheet from '../img/blocksheet.png'\r\n\r\nexport const collide = (b: Blocks, m: Mino): boolean => {\r\n\r\n    for (let block of m.blocks) {\r\n        if (b[block[1]]?.[block[0]] === undefined || b[block[1]][block[0]]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const getNewMino = (type: minoType, ox = 0, oy = 0): Mino => {\r\n    let blocks = minoTypes[type].map(block => [ox + block[0], oy + block[1]] as [number, number]);\r\n\r\n    return {\r\n        blocks: blocks,\r\n        type: type,\r\n        perm: 0,\r\n        ox: ox,\r\n        oy: oy\r\n    }\r\n}\r\n\r\nexport const getMovedMino = (m: Mino, x: number, y: number) : Mino => {\r\n    const newBlocks = m.blocks.map(block => [block[0] + x, block[1] + y] as [number, number])\r\n    return {\r\n        ...m,\r\n        blocks: newBlocks,\r\n        ox: m.ox + x,\r\n        oy: m.oy + y\r\n    }\r\n}\r\n\r\nexport const getRotatedMino = (m: Mino, n: number) : Mino => {\r\n    const numRotations = ((n % 4) + 4) % 4\r\n    let newBlocks = m.blocks;\r\n\r\n    for (let i = 0; i < numRotations; i++){\r\n        newBlocks = newBlocks.map((block => [(block[1] - m.oy) + m.ox, -(block[0] - m.ox) + m.oy] as [number, number]))\r\n    }\r\n\r\n    return {\r\n        ...m,\r\n        blocks: newBlocks,\r\n        perm: (m.perm + numRotations) % 4\r\n    }\r\n}\r\n\r\nexport const lowest = (b: Blocks, m: Mino): Mino => {\r\n    let i = -1\r\n    let tempMino = getMovedMino(m, 0, i);\r\n\r\n    while (!collide(b, tempMino)){\r\n        i--;\r\n        tempMino = getMovedMino(m, 0, i);\r\n    }\r\n\r\n    return getMovedMino(m, 0, i + 1);\r\n}\r\n\r\nexport const drawMino = (ctx: CanvasRenderingContext2D, m: Mino) => {\r\n    const blocksheetSprite = new Image();\r\n    blocksheetSprite.src = blocksheet;\r\n\r\n    const heightOffset = ctx.canvas.height / blocksize - 1; \r\n\r\n    for (let block of m.blocks) {\r\n        ctx.drawImage(\r\n            blocksheetSprite,\r\n            blocksize * minoIndexes[m.type as keyof typeof minoIndexes],\r\n            0,\r\n            blocksize,\r\n            blocksize, \r\n            block[0] * blocksize,\r\n            (heightOffset - block[1]) * blocksize,\r\n            blocksize,\r\n            blocksize\r\n        );\r\n    }\r\n}\r\n\r\nexport const getShuffledQueue = (): minoType[] => {\r\n    //Fisher-Yates shuffle\r\n    let base = ['T', 'I', 'O', 'L', 'J', 'S', 'Z'] as minoType[];\r\n    let remaining = base.length;\r\n    \r\n    let i;\r\n    while (remaining){\r\n        i = Math.floor(Math.random() * remaining--);\r\n        [base[remaining], base[i]] = [base[i], base[remaining]];\r\n    }\r\n\r\n    return base;\r\n}\r\n\r\n// used for drawing in hold and queue:\r\nexport const getMinoWidth = (m: Mino): number => {\r\n    const seen: number[] = [];\r\n    m.blocks.forEach(block => {\r\n        if (!seen.includes(block[0])) {\r\n            seen.push(block[0]);\r\n        }\r\n    })\r\n    return seen.length;\r\n}\r\n\r\nexport const getMinoHeight = (m: Mino): number => {\r\n    const seen: number[] = [];\r\n    m.blocks.forEach(block => {\r\n        if (!seen.includes(block[1])) {\r\n            seen.push(block[1]);\r\n        }\r\n    })\r\n    return seen.length;\r\n}\r\n\r\nexport const getBoardWithPlacedMinos = (b: Blocks, minos: Mino[]): Blocks => {\r\n    \r\n    const new_b: Blocks = Array.from({ length: 4 }, () => Array(10).fill('')) // fills with blocks\r\n    // offset is to cover for if any lines are cleared in the middle of the solution\r\n    let offset = Array(4).fill(0);\r\n    const cleared = Array(4).fill(false)\r\n\r\n    for (let m of minos) {\r\n\r\n        for (let block of m.blocks) {\r\n            new_b[block[1] + offset[block[1]]][block[0]] = m.type;\r\n        }\r\n\r\n        // check if any lines have been cleared, if so, modify offset appropriately\r\n        let new_offset = offset.slice()\r\n\r\n        for (let row = 3; row >= 0; row--) {\r\n            if (!cleared[row]) {\r\n                let sum = 0;\r\n                for (let block = 0; block < 10; block++) {\r\n                    if (b[row][block] !== '' || new_b[row][block] !== '') {\r\n                        sum++;\r\n                    }\r\n                }\r\n\r\n                if (sum === 10) {\r\n                    // modifying offset\r\n                    new_offset.splice(row - offset[row], 1)\r\n                    for (let i = row - offset[row]; i < new_offset.length; i++) {\r\n                        new_offset[i]++;\r\n                    }\r\n                    new_offset.push(new_offset[new_offset.length - 1])\r\n                    cleared[row] = true\r\n                }\r\n            }\r\n        }\r\n\r\n        offset = new_offset.slice()\r\n    }\r\n\r\n    return new_b;\r\n}","// // eslint-disable-next-line no-restricted-globals\r\n// const ctx: Worker = self as any;\r\n\r\n// // Respond to message from parent thread\r\n// ctx.addEventListener(\"message\", (event) => console.log(event));\r\n\r\nimport { minoTypes, srsOffsets } from '../constants/minodata'\r\nimport { getBoardWithPlacedMinos } from './util';\r\n\r\ntype minoType = 'I' | 'O' | 'T' | 'L' | 'J' | 'Z' | 'S';\r\n\r\ninterface Mino {\r\n    blocks: [number, number][],\r\n    type: minoType;\r\n    perm: number;\r\n    ox: number,\r\n    oy: number,\r\n}\r\n\r\ntype blockType = minoType | 'G' | ''\r\n\r\ntype Blocks = blockType[][]\r\n\r\nconst getNewMino = (type: minoType, ox = 0, oy = 0): Mino => {\r\n    let blocks = minoTypes[type].map(block => [ox + block[0], oy + block[1]] as [number, number]);\r\n\r\n    return {\r\n        blocks: blocks,\r\n        type: type,\r\n        perm: 0,\r\n        ox: ox,\r\n        oy: oy\r\n    }\r\n}\r\n\r\nconst getMovedMino = (m: Mino, x: number, y: number) : Mino => {\r\n    const newBlocks = m.blocks.map(block => [block[0] + x, block[1] + y] as [number, number])\r\n    return {\r\n        ...m,\r\n        blocks: newBlocks,\r\n        ox: m.ox + x,\r\n        oy: m.oy + y\r\n    }\r\n}\r\n\r\nconst getRotatedMino = (m: Mino, n: number) : Mino => {\r\n    const numRotations = ((n % 4) + 4) % 4\r\n    let newBlocks = m.blocks;\r\n\r\n    for (let i = 0; i < numRotations; i++){\r\n        newBlocks = newBlocks.map((block => [(block[1] - m.oy) + m.ox, -(block[0] - m.ox) + m.oy] as [number, number]))\r\n    }\r\n\r\n    return {\r\n        ...m,\r\n        blocks: newBlocks,\r\n        perm: (m.perm + numRotations) % 4\r\n    }\r\n}\r\n\r\nconst collide = (b: Blocks, m: Mino): boolean => {\r\n    for (let block of m.blocks) {\r\n        if (b[block[1]]?.[block[0]] === undefined || b[block[1]][block[0]]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction topless_collide(b: Blocks, m: Mino): boolean{ // collide that doesn't trigger on top undefined\r\n    for (let block of m.blocks) {\r\n        if (block[1] >= b.length && (0 <= block[0] && block[0] < 10)) {}\r\n        else if (b[block[1]]?.[block[0]] === undefined || b[block[1]][block[0]]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst setMultipleBlocks = (b: Blocks, blocklist: [number, number][], type: blockType) => {\r\n    let tempBlocks = JSON.parse(JSON.stringify(b)) as Blocks;\r\n    \r\n    for (let block of blocklist) {\r\n        if (block[0] < 10 && block[1] < 4) {\r\n            tempBlocks[block[1]][block[0]] = type;\r\n        }\r\n    }\r\n\r\n    // check to clear lines:\r\n    for (let i = 0; i < tempBlocks.length; i++){\r\n        if (!tempBlocks[i].includes('')) {\r\n            tempBlocks.splice(i, 1);\r\n            // tempBlocks.push(Array(10).fill(''));\r\n            i--;\r\n        }\r\n    }\r\n\r\n    return tempBlocks;\r\n}\r\n\r\n// when it gets input from the main file, run everything else.\r\n// state.data has b (2d Array of Chars), curr (Char), hold (Char), queue (Array of Chars)\r\nonmessage = (msg: MessageEvent) => {\r\n    console.log('message received');\r\n    const state: {b: Blocks, hold: minoType, queue: minoType[]} = msg.data;\r\n\r\n    // if hold exists, append current mino to beginning of queue, otherwise make current mino held\r\n    let new_queue = [...state.queue];\r\n    let new_hold: minoType | undefined;\r\n\r\n    if (state.hold != null) {\r\n        new_hold = state.hold; \r\n    }\r\n    else {\r\n        new_hold = new_queue.shift();\r\n    }\r\n\r\n    const stackHeight = state.b.reduce((acc, row, i) => {\r\n        if (row.some(block => block !== '')) {\r\n            return i + 1;\r\n        } else {\r\n            return acc;\r\n        }\r\n    }, 0);\r\n    \r\n    const new_b = JSON.parse(JSON.stringify(state.b)).slice(0, Math.max(stackHeight, 4)); \r\n\r\n    let solutions: Mino[][];\r\n    if (!new_hold || stackHeight === 0) {\r\n        solutions = [];\r\n    } else {\r\n        solutions = getAllPCs(new_b, new_queue, new_hold);\r\n    }\r\n\r\n    solutions = eliminate_duplicate_solutions(new_b, solutions);\r\n\r\n    postMessage(solutions);\r\n\r\n    console.log('finished.')\r\n}\r\n\r\nfunction getAllPCs(b: Blocks, queue: minoType[], hold: minoType): Mino[][] {\r\n    let result = [] as Mino[][];\r\n\r\n    for (let h = 1; h < 5; h++){\r\n        if (is_pcable(b, queue, h)){\r\n            // console.log(`searching for ${h}-height pcs...`)\r\n            result = [...result, ...getAllPCsByHeight(b, queue, hold, h)]; \r\n        }\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\nfunction is_pcable(b: Blocks, queue: minoType[], height=4): boolean{// check if board is pc-able given queue\r\n    // check if board height is higher than pc height\r\n    for (let i = height; i < b.length; i++){        \r\n        for (let block of b[i]){\r\n            if (block) {\r\n                // console.log(`Board height is higher than ${height}!`)\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // check if number of empty spaces on board is divisible by 4\r\n    let empty_blocks = 0;\r\n    for (let row of b){        \r\n        empty_blocks += row.reduce((acc, block) => acc += (block === '' ? 1 : 0), 0);\r\n    }\r\n    if (empty_blocks % 4 !== 0) {\r\n        // console.log('Remaining space is not divisible by 4!')\r\n        return false;\r\n    }\r\n\r\n    // check if queue length is long enough to pc\r\n    if (empty_blocks / 4 > queue.length) {\r\n        // console.log('Queue is not long enough!')\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction is_lowest(b: Blocks, m: Mino){\r\n    for (let block of m.blocks){\r\n        if (block[1] === 0){\r\n            return true;\r\n        } \r\n        else if (b[block[1] - 1][block[0]]){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction get_all_lowest(b: Blocks, type: minoType, height=4): Mino[] {\r\n    let result = [];\r\n\r\n    for (let perm = 0; perm < 4; perm++){\r\n        for (let x = 0; x < 10; x++){\r\n            for (let y = 0; y < height; y++){\r\n                const tempmino = getRotatedMino(getNewMino(type, x, y), perm);\r\n                if (!collide(b, tempmino) && is_lowest(b, tempmino) && is_reachable(b, tempmino, 0)){\r\n                    result.push(tempmino);\r\n                }\r\n            }\r\n        }\r\n        if (type === 'O' && perm > 0) break;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction is_reachable(b: Blocks, m: Mino, iter=0): boolean {\r\n    // check if we've already done too much iterations of this, currently set to maximum 3 but can add more\r\n    if (iter > 4){\r\n        return false;\r\n    }\r\n\r\n    // check if the mino is already collided with the board\r\n    // this is collide() from main file, modified so blocks above board don't trigger collision\r\n    if (topless_collide(b, m)){\r\n        return false;\r\n    }\r\n\r\n    // check if it can just go straight up\r\n    let can_go_up = true;\r\n    for (let block of m.blocks){\r\n        if (can_go_up){\r\n            for (let i = 0; i < b.length; i++){\r\n                if (b[block[1] + i]?.[block[0]]){\r\n                    can_go_up = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else break;\r\n    }\r\n    if (can_go_up) return true;\r\n\r\n    // check each dir: up, left, right (no down)\r\n    if (is_reachable(b, getMovedMino(m, 0, 1), iter + 1) ||\r\n        is_reachable(b, getMovedMino(m, -1, 0), iter + 1) ||\r\n        is_reachable(b, getMovedMino(m, 1, 0), iter + 1)) {\r\n        return true;\r\n    }\r\n    // check each rotation, don't check if O piece\r\n    else if (m.type !== 'O'){\r\n        for (let rot = 1; rot < 4; rot++) {\r\n            // check each offset:\r\n            for (let os = 0; os < 5; os++) {\r\n                // setting up the offset values\r\n                let oldperm = (m.perm + rot + 4) % 4\r\n                let offset = [\r\n                    srsOffsets[m.type][oldperm][os][0] - srsOffsets[m.type][m.perm][os][0],\r\n                    srsOffsets[m.type][oldperm][os][1] - srsOffsets[m.type][m.perm][os][1]\r\n                ] as [number, number];\r\n                \r\n                // create copy of m, rotate it, and apply reversed offset\r\n                const possibleOldMino = getRotatedMino(getMovedMino(m, -offset[0], -offset[1]), rot); \r\n                \r\n                if (!topless_collide(b, possibleOldMino)) {\r\n                    // rotate the possible old mino to check if the spin is actually what happens\r\n                    const currOffset = srsOffsets[possibleOldMino.type];\r\n                    const rotatedOldMino = getRotatedMino(possibleOldMino, -rot + 4); // -rot + 4 undoes rotation\r\n\r\n                    for (let i = 0; i < currOffset[possibleOldMino.perm].length; i++) {\r\n                        const offset = [\r\n                            currOffset[possibleOldMino.perm][i][0] - currOffset[rotatedOldMino.perm][i][0],\r\n                            currOffset[possibleOldMino.perm][i][1] - currOffset[rotatedOldMino.perm][i][1]\r\n                        ]\r\n                        const offsetMino = getMovedMino(rotatedOldMino, offset[0], offset[1])\r\n\r\n                        // check if the rotated old mino becomes the mino we want\r\n                        if (!topless_collide(b, offsetMino)) {\r\n                            if (offsetMino.ox === m.ox && offsetMino.oy === m.oy &&\r\n                                is_reachable(b, possibleOldMino, iter + 1)) {\r\n                                return true;\r\n                            } else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getAllPCsByHeight(b: Blocks, queue: minoType[], hold: minoType, height: number = 4): Mino[][] {\r\n\r\n    interface State {\r\n        blocks: Blocks,\r\n        queue: minoType[],\r\n        hold: minoType,\r\n        history: Mino[],\r\n    }\r\n\r\n    const searchQueue: State[] = [{\r\n        blocks: b,\r\n        queue: queue,\r\n        hold: hold,\r\n        history: []\r\n    }];\r\n    const result: Mino[][] = [];\r\n\r\n    while (searchQueue.length > 0) {\r\n        const currState = searchQueue.shift()!;\r\n        const new_b = currState.history.length > 0 ? \r\n        setMultipleBlocks(\r\n            currState.blocks, \r\n            currState.history[currState.history.length - 1].blocks, \r\n            currState.history[currState.history.length - 1].type\r\n        ) :\r\n        JSON.parse(JSON.stringify(currState.blocks)) as Blocks;\r\n\r\n        if (new_b.length === 0) {\r\n            result.push(currState.history);\r\n\r\n            // if (result.length % 10 === 0) console.log(`found ${result.length} solutions...`);\r\n        } else {\r\n            if (currState.queue.length <= 0 && currState.hold === null) {\r\n                // pass\r\n            }\r\n            // else if (seen_boards.includes(JSON.stringify([queue[0], ...new_b.blocks]))){\r\n            //     // pass\r\n            // }\r\n            else {\r\n                // seen_boards.push(JSON.stringify([queue[0], ...new_b.blocks]))\r\n\r\n                // current mino as next\r\n                for (let m of get_all_lowest(new_b, currState.queue[0], currState.blocks.length)) {\r\n                    searchQueue.push({\r\n                        blocks: new_b,\r\n                        queue: currState.queue.slice(1),\r\n                        hold: currState.hold,\r\n                        history: [...currState.history, m]\r\n                    })\r\n                }\r\n\r\n                // hold mino as next\r\n                for (let m of get_all_lowest(new_b, currState.hold, currState.blocks.length)) {\r\n                    searchQueue.push({\r\n                        blocks: new_b,\r\n                        queue: currState.queue.slice(1),\r\n                        hold: currState.queue[0],\r\n                        history: [...currState.history, m]\r\n                    })\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction eliminate_duplicate_solutions(b: Blocks, sols: Mino[][]): Mino[][] {\r\n    let new_sols = []; \r\n    let seen = []; \r\n\r\n    for (let s of sols){\r\n\r\n        let new_b = getBoardWithPlacedMinos(b, s);\r\n\r\n        let was_seen = false; \r\n        for (let arrangement of seen){\r\n            if (JSON.stringify(new_b) === JSON.stringify(arrangement)) {\r\n                was_seen = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!was_seen){\r\n            seen.push(new_b);\r\n            new_sols.push(s);\r\n        }\r\n    }\r\n\r\n    return new_sols;\r\n}\r\n\r\nexport {}"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_toConsumableArray","isArray","iter","Symbol","iterator","TypeError","allowArrayLike","it","F","s","done","value","e","_e","f","err","normalCompletion","didErr","step","next","_e2","_typeof","_toPropertyKey","arg","key","input","hint","prim","toPrimitive","undefined","res","String","Number","ownKeys","r","t","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","arguments","forEach","obj","defineProperty","configurable","writable","getOwnPropertyDescriptors","defineProperties","minoTypes","srsOffsets","I","O","T","L","J","Z","S","getBoardWithPlacedMinos","b","minos","_step3","new_b","fill","offset","cleared","_iterator3","_createForOfIteratorHelper","_step4","m","_iterator4","blocks","block","type","new_offset","row","sum","splice","getNewMino","ox","oy","map","perm","getMovedMino","x","y","newBlocks","_objectSpread","getRotatedMino","numRotations","collide","_step","_iterator","_b$block$","topless_collide","_step2","_iterator2","_b$block$2","setMultipleBlocks","blocklist","tempBlocks","JSON","parse","stringify","includes","is_pcable","queue","_step5","empty_blocks","_iterator5","reduce","acc","is_lowest","_step6","_iterator6","get_all_lowest","height","result","tempmino","is_reachable","_step7","can_go_up","_iterator7","_b","rot","os","oldperm","possibleOldMino","currOffset","rotatedOldMino","offsetMino","getAllPCsByHeight","hold","searchQueue","history","currState","shift","_step8","_iterator8","concat","_step9","_iterator9","onmessage","msg","console","log","new_hold","state","data","new_queue","solutions","stackHeight","some","Math","max","sols","_step10","new_sols","seen","_iterator10","_step11","was_seen","_iterator11","arrangement","eliminate_duplicate_solutions","h","getAllPCs","postMessage"],"sourceRoot":""}