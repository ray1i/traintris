{"version":3,"file":"static/js/pc-finder.worker.d0e06fa6.worker.js","mappings":"yBAAe,SAASA,EAAkBC,EAAKC,IAClC,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAE/C,IAAK,IAAIC,EAAI,EAAGC,EAAO,IAAIC,MAAMJ,GAAME,EAAIF,EAAKE,IAC9CC,EAAKD,GAAKH,EAAIG,GAGhB,OAAOC,CACT,CCPe,SAASE,EAA4BC,EAAGC,GACrD,GAAKD,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO,EAAiBA,EAAGC,GACtD,IAAIC,EAAIC,OAAOC,UAAUC,SAASC,KAAKN,GAAGO,MAAM,GAAI,GAEpD,MADU,WAANL,GAAkBF,EAAEQ,cAAaN,EAAIF,EAAEQ,YAAYC,MAC7C,QAANP,GAAqB,QAANA,EAAoBJ,MAAMY,KAAKV,GACxC,cAANE,GAAqB,2CAA2CS,KAAKT,GAAW,EAAiBF,EAAGC,QAAxG,CALc,CAMhB,CCJe,SAASW,EAAmBnB,GACzC,OCJa,SAA4BA,GACzC,GAAIK,MAAMe,QAAQpB,GAAM,OAAO,EAAiBA,EAClD,CDES,CAAkBA,IELZ,SAA0BqB,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOhB,MAAMY,KAAKI,EACtH,CFGmC,CAAgBrB,IAAQ,EAA2BA,IGLvE,WACb,MAAM,IAAIwB,UAAU,uIACtB,CHG8F,EAC9F,CILe,SAAS,EAA2BjB,EAAGkB,GACpD,IAAIC,EAAuB,qBAAXJ,QAA0Bf,EAAEe,OAAOC,WAAahB,EAAE,cAElE,IAAKmB,EAAI,CACP,GAAIrB,MAAMe,QAAQb,KAAOmB,EAAK,EAA2BnB,KAAOkB,GAAkBlB,GAAyB,kBAAbA,EAAEL,OAAqB,CAC/GwB,IAAInB,EAAImB,GACZ,IAAIvB,EAAI,EAEJwB,EAAI,WAAc,EAEtB,MAAO,CACLC,EAAGD,EACHlB,EAAG,WACD,OAAIN,GAAKI,EAAEL,OAAe,CACxB2B,MAAM,GAED,CACLA,MAAM,EACNC,MAAOvB,EAAEJ,KAEb,EACA4B,EAAG,SAAWC,GACZ,MAAMA,CACR,EACAC,EAAGN,EAEP,CAEA,MAAM,IAAIH,UAAU,wIACtB,CAEA,IAEIU,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLR,EAAG,WACDF,EAAKA,EAAGb,KAAKN,EACf,EACAE,EAAG,WACD,IAAI4B,EAAOX,EAAGY,OAEd,OADAH,EAAmBE,EAAKR,KACjBQ,CACT,EACAN,EAAG,SAAWQ,GACZH,GAAS,EACTF,EAAMK,CACR,EACAN,EAAG,WACD,IACOE,GAAoC,MAAhBT,EAAW,QAAWA,EAAW,QAG5D,CAFE,QACA,GAAIU,EAAQ,MAAMF,CACpB,CACF,EAEJ,CCxDe,SAASM,EAAgBC,EAAKC,EAAKZ,GAYhD,OAXIY,KAAOD,EACT/B,OAAOiC,eAAeF,EAAKC,EAAK,CAC9BZ,MAAOA,EACPc,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZL,EAAIC,GAAOZ,EAGNW,CACT,CCXA,SAASM,EAAQC,EAAQC,GACvB,IAAIC,EAAOxC,OAAOwC,KAAKF,GAEvB,GAAItC,OAAOyC,sBAAuB,CAChC,IAAIC,EAAU1C,OAAOyC,sBAAsBH,GAC3CC,IAAmBG,EAAUA,EAAQC,QAAO,SAAUC,GACpD,OAAO5C,OAAO6C,yBAAyBP,EAAQM,GAAKV,UACtD,KAAKM,EAAKM,KAAKC,MAAMP,EAAME,EAC7B,CAEA,OAAOF,CACT,CAEe,SAASQ,EAAeC,GACrC,IAAK,IAAIxD,EAAI,EAAGA,EAAIyD,UAAU1D,OAAQC,IAAK,CACzC,IAAI0D,EAAS,MAAQD,UAAUzD,GAAKyD,UAAUzD,GAAK,CAAC,EACpDA,EAAI,EAAI4C,EAAQrC,OAAOmD,IAAS,GAAIC,SAAQ,SAAUpB,GACpD,EAAeiB,EAAQjB,EAAKmB,EAAOnB,GACrC,IAAKhC,OAAOqD,0BAA4BrD,OAAOsD,iBAAiBL,EAAQjD,OAAOqD,0BAA0BF,IAAWd,EAAQrC,OAAOmD,IAASC,SAAQ,SAAUpB,GAC5JhC,OAAOiC,eAAegB,EAAQjB,EAAKhC,OAAO6C,yBAAyBM,EAAQnB,GAC7E,GACF,CAEA,OAAOiB,CACT,CC1BO,IAAMM,EAAY,CACrB,EAAK,CAAC,EAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAEtC,EAAK,CAAU,CAAE,EAAG,GAAI,CAAE,EAAG,GACd,CAAE,EAAG,GAAI,CAAE,EAAG,IAE7B,EAAK,CAAU,CAAE,EAAG,GACd,EAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAE7B,EAAK,CAAmB,CAAE,EAAG,GACvB,EAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAE7B,EAAK,CAAC,EAAE,EAAG,GACL,EAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAE7B,EAAK,CAAC,EAAE,EAAG,GAAI,CAAE,EAAG,GACL,CAAE,EAAG,GAAI,CAAE,EAAG,IAE7B,EAAK,CAAU,CAAE,EAAG,GAAI,CAAE,EAAG,GACvB,EAAE,EAAG,GAAI,CAAE,EAAG,KAKXC,EAAa,CACtBC,EAAG,CACC,CAAC,CAAE,EAAG,GAAI,EAAE,EAAG,GAAI,CAAC,EAAI,GAAI,EAAE,EAAG,GAAI,CAAC,EAAI,IAC1C,CAAC,EAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAE,GAAK,CAAE,GAAG,IAC1C,CAAC,EAAE,EAAG,GAAK,CAAC,EAAG,GAAK,EAAE,EAAE,GAAK,CAAC,EAAI,GAAI,EAAE,EAAG,IAC3C,CAAC,CAAE,EAAE,GAAK,CAAE,EAAE,GAAK,CAAE,EAAE,GAAK,CAAE,GAAG,GAAI,CAAE,EAAE,KAE7CC,EAAG,CACC,CAAC,CAAE,EAAG,IACN,CAAC,CAAE,GAAG,IACN,CAAC,EAAE,GAAG,IACN,CAAC,EAAE,EAAG,KAEVC,EAAG,CACC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,CAAC,EAAI,GAAI,CAAC,GAAI,GAAI,CAAE,EAAE,GAAK,CAAC,EAAG,IACzC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,GAAG,GAAI,CAAE,EAAE,GAAK,EAAE,EAAE,KAE7CC,EAAG,CACC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,CAAC,EAAI,GAAI,CAAC,GAAI,GAAI,CAAE,EAAE,GAAK,CAAC,EAAG,IACzC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,GAAG,GAAI,CAAE,EAAE,GAAK,EAAE,EAAE,KAE7CC,EAAG,CACC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,CAAC,EAAI,GAAI,CAAC,GAAI,GAAI,CAAE,EAAE,GAAK,CAAC,EAAG,IACzC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,GAAG,GAAI,CAAE,EAAE,GAAK,EAAE,EAAE,KAE7CC,EAAG,CACC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,CAAC,EAAI,GAAI,CAAC,GAAI,GAAI,CAAE,EAAE,GAAK,CAAC,EAAG,IACzC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,GAAG,GAAI,CAAE,EAAE,GAAK,EAAE,EAAE,KAE7CC,EAAG,CACC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,CAAC,EAAI,GAAI,CAAC,GAAI,GAAI,CAAE,EAAE,GAAK,CAAC,EAAG,IACzC,CAAC,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,IAC1C,CAAC,CAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,GAAG,GAAI,CAAE,EAAE,GAAK,EAAE,EAAE,MCwDpCC,EAA0B,SAACC,EAAWC,GAE/C,IAFyE,EAEnEC,EAAgBxE,MAAMY,KAAK,CAAEf,OAAQ,IAAK,kBAAMG,MAAM,IAAIyE,KAAK,GAArB,IAE5CC,EAAS1E,MAAM,GAAGyE,KAAK,GACrBE,EAAU3E,MAAM,GAAGyE,MAAK,GAL2C,IAO3DF,GAP2D,IAOzE,2BAAqB,CAAC,IAAD,EAAZK,EAAY,YAECA,EAAEC,QAFH,IAEjB,2BAA4B,CAAC,IAApBC,EAAmB,QACxBN,EAAMM,EAAM,GAAKJ,EAAOI,EAAM,KAAKA,EAAM,IAAMF,EAAEG,IACpD,CAJgB,+BASjB,IAFA,IAAIC,EAAaN,EAAOjE,QAEfwE,EAAM,EAAGA,GAAO,EAAGA,IACxB,IAAKN,EAAQM,GAAM,CAEf,IADA,IAAIC,EAAM,EACDJ,EAAQ,EAAGA,EAAQ,GAAIA,IACN,KAAlBR,EAAEW,GAAKH,IAAuC,KAAtBN,EAAMS,GAAKH,IACnCI,IAIR,GAAY,KAARA,EAAY,CAEZF,EAAWG,OAAOF,EAAMP,EAAOO,GAAM,GACrC,IAAK,IAAInF,EAAImF,EAAMP,EAAOO,GAAMnF,EAAIkF,EAAWnF,OAAQC,IACnDkF,EAAWlF,KAEfkF,EAAW7B,KAAK6B,EAAWA,EAAWnF,OAAS,IAC/C8E,EAAQM,IAAO,CAClB,CACJ,CAGLP,EAASM,EAAWvE,OACvB,CAtCwE,+BAwCzE,OAAO+D,CACV,EC3IKY,EAAa,SAACL,GAA0C,IAA1BM,EAAyB,uDAApB,EAAGC,EAAiB,uDAAZ,EACzCT,EAASjB,EAAUmB,GAAMQ,KAAI,SAAAT,GAAK,MAAI,CAACO,EAAKP,EAAM,GAAIQ,EAAKR,EAAM,GAA/B,IAEtC,MAAO,CACHD,OAAQA,EACRE,KAAMA,EACNS,KAAM,EACNH,GAAIA,EACJC,GAAIA,EAEX,EAEKG,EAAe,SAACb,EAASc,EAAWC,GACtC,IAAMC,EAAYhB,EAAEC,OAAOU,KAAI,SAAAT,GAAK,MAAI,CAACA,EAAM,GAAKY,EAAGZ,EAAM,GAAKa,EAA9B,IACpC,OAAO,OACAf,GADP,IAEIC,OAAQe,EACRP,GAAIT,EAAES,GAAKK,EACXJ,GAAIV,EAAEU,GAAKK,GAElB,EAEKE,EAAiB,SAACjB,EAASxE,GAI7B,IAHA,IAAM0F,GAAiB1F,EAAI,EAAK,GAAK,EACjCwF,EAAYhB,EAAEC,OAET/E,EAAI,EAAGA,EAAIgG,EAAchG,IAC9B8F,EAAYA,EAAUL,KAAK,SAAAT,GAAK,MAAI,CAAEA,EAAM,GAAKF,EAAEU,GAAMV,EAAES,KAAMP,EAAM,GAAKF,EAAES,IAAMT,EAAEU,GAAtD,IAGpC,OAAO,OACAV,GADP,IAEIC,OAAQe,EACRJ,MAAOZ,EAAEY,KAAOM,GAAgB,GAEvC,EAEKC,EAAU,SAACzB,EAAWM,GAAsB,IAAD,MAC3BA,EAAEC,QADyB,IAC7C,2BAA4B,CAAC,IAAD,EAAnBC,EAAmB,QACxB,QAAgCkB,KAA5B,UAAA1B,EAAEQ,EAAM,WAAR,eAAcA,EAAM,MAAqBR,EAAEQ,EAAM,IAAIA,EAAM,IAC3D,OAAO,CAEd,CAL4C,+BAM7C,OAAO,CACV,EAED,SAASmB,EAAgB3B,EAAWM,GAAiB,UAC/BA,EAAEC,QAD6B,IACjD,2BAA4B,CAAC,IAAD,EAAnBC,EAAmB,QACxB,GAAIA,EAAM,IAAMR,EAAEzE,QAAW,GAAKiF,EAAM,IAAMA,EAAM,GAAK,SACpD,QAAgCkB,KAA5B,UAAA1B,EAAEQ,EAAM,WAAR,eAAcA,EAAM,MAAqBR,EAAEQ,EAAM,IAAIA,EAAM,IAChE,OAAO,CAEd,CANgD,+BAOjD,OAAO,CACV,CAED,IAAMoB,EAAoB,SAAC5B,EAAW6B,EAA+BpB,GACjE,IADqF,EACjFqB,EAAaC,KAAKC,MAAMD,KAAKE,UAAUjC,IAD0C,IAGnE6B,GAHmE,IAGrF,2BAA6B,CAAC,IAArBrB,EAAoB,QACrBA,EAAM,GAAK,IAAMA,EAAM,GAAK,IAC5BsB,EAAWtB,EAAM,IAAIA,EAAM,IAAMC,EAExC,CAPoF,+BAUrF,IAAK,IAAIjF,EAAI,EAAGA,EAAIsG,EAAWvG,OAAQC,IAC9BsG,EAAWtG,GAAG0G,SAAS,MACxBJ,EAAWjB,OAAOrF,EAAG,GAErBA,KAIR,OAAOsG,CACV,EAwDD,SAASK,EAAUnC,EAAWoC,GAE1B,IAFgE,IAAnBC,EAAkB,uDAAX,EAE3C7G,EAAI6G,EAAQ7G,EAAIwE,EAAEzE,OAAQC,IAAI,CAAC,IAAD,MACjBwE,EAAExE,IADe,IACnC,2BAAuB,CAAC,IAAfgF,EAAc,QACnB,GAAIA,EAEA,OAAO,CAEd,CANkC,+BAOtC,CAGD,IAZ+D,EAY3D8B,EAAe,EAZ4C,IAa/CtC,GAb+C,IAa/D,2BAAkB,CAAC,IAAVW,EAAS,QACd2B,GAAgB3B,EAAI4B,QAAO,SAACC,EAAKhC,GAAN,OAAgBgC,GAAkB,KAAVhC,EAAe,EAAI,EAA3C,GAA+C,EAC7E,CAf8D,+BAgB/D,OAAI8B,EAAe,IAAM,KAMrBA,EAAe,EAAIF,EAAM7G,OAMhC,CAED,SAASkH,EAAUzC,EAAWM,GAAS,IAAD,MAChBA,EAAEC,QADc,IAClC,2BAA2B,CAAC,IAAnBC,EAAkB,QACvB,GAAiB,IAAbA,EAAM,GACN,OAAO,EAEN,GAAIR,EAAEQ,EAAM,GAAK,GAAGA,EAAM,IAC3B,OAAO,CAEd,CARiC,+BASlC,OAAO,CACV,CAED,SAASkC,EAAe1C,EAAWS,GAG/B,IAHkE,IAAnB4B,EAAkB,uDAAX,EAClDM,EAAS,GAEJzB,EAAO,EAAGA,EAAO,EAAGA,IAAO,CAChC,IAAK,IAAIE,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIgB,EAAQhB,IAAI,CAC5B,IAAMuB,EAAWrB,EAAeT,EAAWL,EAAMW,EAAGC,GAAIH,IACnDO,EAAQzB,EAAG4C,IAAaH,EAAUzC,EAAG4C,IAAaC,EAAa7C,EAAG4C,EAAU,IAC7ED,EAAO9D,KAAK+D,EAEnB,CAEL,GAAa,MAATnC,GAAgBS,EAAO,EAAG,KACjC,CAED,OAAOyB,CACV,CAED,SAASE,EAAa7C,EAAWM,GAA2B,IAAlB5D,EAAiB,uDAAZ,EAE3C,GAAIA,EAAO,EACP,OAAO,EAKX,GAAIiF,EAAgB3B,EAAGM,GACnB,OAAO,EAIX,IAbuD,EAanDwC,GAAY,EAbuC,IAcrCxC,EAAEC,QAdmC,IAcvD,2BAA2B,CAAC,IAAnBC,EAAkB,QACvB,IAAIsC,EAQC,MAPD,IAAK,IAAItH,EAAI,EAAGA,EAAIwE,EAAEzE,OAAQC,IAAI,CAAC,IAAD,EAC9B,aAAIwE,EAAEQ,EAAM,GAAKhF,UAAjB,OAAI,EAAkBgF,EAAM,IAAI,CAC5BsC,GAAY,EACZ,KACH,CACJ,CAGR,CAxBsD,+BAyBvD,GAAIA,EAAW,OAAO,EAGtB,GAAID,EAAa7C,EAAGmB,EAAab,EAAG,EAAG,GAAI5D,EAAO,IAC9CmG,EAAa7C,EAAGmB,EAAab,GAAI,EAAG,GAAI5D,EAAO,IAC/CmG,EAAa7C,EAAGmB,EAAab,EAAG,EAAG,GAAI5D,EAAO,GAC9C,OAAO,EAGN,GAAe,MAAX4D,EAAEG,KACP,IAAK,IAAIsC,EAAM,EAAGA,EAAM,EAAGA,IAEvB,IAAK,IAAIC,EAAK,EAAGA,EAAK,EAAGA,IAAM,CAE3B,IAAIC,GAAW3C,EAAEY,KAAO6B,EAAM,GAAK,EAC/B3C,EAAS,CACTb,EAAWe,EAAEG,MAAMwC,GAASD,GAAI,GAAKzD,EAAWe,EAAEG,MAAMH,EAAEY,MAAM8B,GAAI,GACpEzD,EAAWe,EAAEG,MAAMwC,GAASD,GAAI,GAAKzD,EAAWe,EAAEG,MAAMH,EAAEY,MAAM8B,GAAI,IAIlEE,EAAkB3B,EAAeJ,EAAab,GAAIF,EAAO,IAAKA,EAAO,IAAK2C,GAEhF,IAAKpB,EAAgB3B,EAAGkD,GAKpB,IAHA,IAAMC,EAAa5D,EAAW2D,EAAgBzC,MACxC2C,EAAiB7B,EAAe2B,EAAwB,EAANH,GAE/CvH,EAAI,EAAGA,EAAI2H,EAAWD,EAAgBhC,MAAM3F,OAAQC,IAAK,CAC9D,IAAM4E,EAAS,CACX+C,EAAWD,EAAgBhC,MAAM1F,GAAG,GAAK2H,EAAWC,EAAelC,MAAM1F,GAAG,GAC5E2H,EAAWD,EAAgBhC,MAAM1F,GAAG,GAAK2H,EAAWC,EAAelC,MAAM1F,GAAG,IAE1E6H,EAAalC,EAAaiC,EAAgBhD,EAAO,GAAIA,EAAO,IAGlE,IAAKuB,EAAgB3B,EAAGqD,GAAa,CACjC,GAAIA,EAAWtC,KAAOT,EAAES,IAAMsC,EAAWrC,KAAOV,EAAEU,IAC9C6B,EAAa7C,EAAGkD,EAAiBxG,EAAO,GACxC,OAAO,EAEP,KAEP,CACJ,CAER,CAIT,OAAO,CACV,CAED,SAAS4G,EAAkBtD,EAAWoC,EAAmBmB,GAiBrD,IAjBoG,IAS9FC,EAAuB,CAAC,CAC1BjD,OAAQP,EACRoC,MAAOA,EACPmB,KAAMA,EACNE,QAAS,KAEPd,EAAmB,GAElBa,EAAYjI,OAAS,GAAG,CAC3B,IAAMmI,EAAYF,EAAYG,QACxBzD,EAAQwD,EAAUD,QAAQlI,OAAS,EACzCqG,EACI8B,EAAUnD,OACVmD,EAAUD,QAAQC,EAAUD,QAAQlI,OAAS,GAAGgF,OAChDmD,EAAUD,QAAQC,EAAUD,QAAQlI,OAAS,GAAGkF,MAEpDsB,KAAKC,MAAMD,KAAKE,UAAUyB,EAAUnD,SAEpC,GAAqB,IAAjBL,EAAM3E,OACNoH,EAAO9D,KAAK6E,EAAUD,cAItB,GAAIC,EAAUtB,MAAM7G,QAAU,GAAwB,OAAnBmI,EAAUH,UAMxC,WAIab,EAAexC,EAAOwD,EAAUtB,MAAM,GAAIsB,EAAUnD,OAAOhF,SAJxE,IAID,2BAAkF,CAAC,IAA1E+E,EAAyE,QAC9EkD,EAAY3E,KAAK,CACb0B,OAAQL,EACRkC,MAAOsB,EAAUtB,MAAMjG,MAAM,GAC7BoH,KAAMG,EAAUH,KAChBE,QAAQ,GAAD,SAAMC,EAAUD,SAAhB,CAAyBnD,KAEvC,CAXA,yCAcaoC,EAAexC,EAAOwD,EAAUH,KAAMG,EAAUnD,OAAOhF,SAdpE,IAcD,2BAA8E,CAAC,IAAtE+E,EAAqE,QAC1EkD,EAAY3E,KAAK,CACb0B,OAAQL,EACRkC,MAAOsB,EAAUtB,MAAMjG,MAAM,GAC7BoH,KAAMG,EAAUtB,MAAM,GACtBqB,QAAQ,GAAD,SAAMC,EAAUD,SAAhB,CAAyBnD,KAGvC,CAtBA,+BAuBJ,CAER,CAED,OAAOqC,CACV,CAhQDiB,UAAY,SAACC,GACTC,QAAQC,IAAI,oBACZ,IAIIC,EAJEC,EAAwDJ,EAAIK,KAG9DC,EAAS,EAAOF,EAAM7B,OAItB4B,EADc,MAAdC,EAAMV,KACKU,EAAMV,KAGNY,EAAUR,QAGzB,IAUIS,EAVEC,EAAcJ,EAAMjE,EAAEuC,QAAO,SAACC,EAAK7B,EAAKnF,GAC1C,OAAImF,EAAI2D,MAAK,SAAA9D,GAAK,MAAc,KAAVA,CAAJ,IACPhF,EAAI,EAEJgH,CAEd,GAAE,GAEGtC,EAAQ6B,KAAKC,MAAMD,KAAKE,UAAUgC,EAAMjE,IAAI7D,MAAM,EAAGoI,KAAKC,IAAIH,EAAa,IASjFD,EAkOJ,SAAuCpE,EAAWyE,GAC9C,IADwE,EACpEC,EAAW,GACXC,EAAO,GAF6D,IAI1DF,GAJ0D,IAIxE,2BAAmB,CAAC,IAAD,EAAVxH,EAAU,QAEXiD,EAAQH,EAAwBC,EAAG/C,GAEnC2H,GAAW,EAJA,IAKSD,GALT,IAKf,2BAA6B,CAAC,IAArBE,EAAoB,QACzB,GAAI9C,KAAKE,UAAU/B,KAAW6B,KAAKE,UAAU4C,GAAc,CACvDD,GAAW,EACX,KACH,CACJ,CAVc,+BAYVA,IACDD,EAAK9F,KAAKqB,GACVwE,EAAS7F,KAAK5B,GAErB,CApBuE,+BAsBxE,OAAOyH,CACV,CAzPeI,CAA8B5E,EAHtCkE,EAHCJ,GAA4B,IAAhBK,EAarB,SAAmBrE,EAAWoC,EAAmBmB,GAG7C,IAFA,IAAIZ,EAAS,GAEJoC,EAAI,EAAGA,EAAI,EAAGA,IACf5C,EAAUnC,EAAGoC,EAAO2C,KAEpBpC,EAAM,YAAOA,GAAP,EAAkBW,EAAkBtD,EAAGoC,EAAOmB,EAAMwB,MAIlE,OAAOpC,CACV,CArBmBqC,CAAU9E,EAAOiE,EAAWH,GAF5B,IAOhBiB,YAAYb,GAEZN,QAAQC,IAAI,YACf,C","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","constants/minodata.ts","scripts/util.ts","scripts/pc-finder.worker.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","export const minoTypes = {\r\n    \"I\": [[-1, 0], [ 0, 0], [ 1, 0], [ 2, 0]],\r\n\r\n    \"O\": [         [ 0, 1], [ 1, 1], \r\n                   [ 0, 0], [ 1, 0]],\r\n\r\n    \"T\": [         [ 0, 1], \r\n          [-1, 0], [ 0, 0], [ 1, 0]],\r\n\r\n    \"L\": [                  [ 1, 1], \r\n          [-1, 0], [ 0, 0], [ 1, 0]],\r\n\r\n    \"J\": [[-1, 1], \r\n          [-1, 0], [ 0, 0], [ 1, 0]],\r\n\r\n    \"Z\": [[-1, 1], [ 0, 1], \r\n                   [ 0, 0], [ 1, 0]],\r\n\r\n    \"S\": [         [ 0, 1], [ 1, 1], \r\n          [-1, 0], [ 0, 0]],\r\n};\r\n\r\n\r\n// SRS\r\nexport const srsOffsets = {\r\n    I: [\r\n        [[ 0, 0], [-1, 0], [+2, 0], [-1, 0], [+2, 0]],\r\n        [[-1, 0], [ 0, 0], [ 0, 0], [ 0,+1], [ 0,-2]],\r\n        [[-1, +1], [+1,+1], [-2,+1], [+1, 0], [-2, 0]],\r\n        [[ 0,+1], [ 0,+1], [ 0,+1], [ 0,-1], [ 0,+2]]\r\n    ],\r\n    O: [\r\n        [[ 0, 0]],\r\n        [[ 0,-1]],\r\n        [[-1,-1]],\r\n        [[-1, 0]]\r\n    ],\r\n    T: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n    L: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n    J: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n    Z: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n    S: [\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [+1, 0], [+1,-1], [ 0,+2], [+1,+2]],\r\n        [[ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0], [ 0, 0]],\r\n        [[ 0, 0], [-1, 0], [-1,-1], [ 0,+2], [-1,+2]]\r\n    ],\r\n};\r\n\r\n// used for blocksheet:\r\n// enum minoIndexes {\r\n//     'I',\r\n//     'O',\r\n//     'T',\r\n//     'L',\r\n//     'J',\r\n//     'Z',\r\n//     'S',\r\n//     'G'\r\n// };\r\nexport const minoIndexes = {\r\n    'I': 0,\r\n    'O': 1,\r\n    'T': 2,\r\n    'L': 3,\r\n    'J': 4,\r\n    'Z': 5,\r\n    'S': 6,\r\n    'G': 7\r\n};\r\n\r\nexport const blocksize = 32;\r\n","import { minoTypes, minoIndexes, blocksize } from \"../constants/minodata\";\r\n\r\nimport { Mino, minoType, Blocks } from \"../types/types\";\r\n\r\nimport blocksheet from '../img/blocksheet.png'\r\n\r\nexport const collide = (b: Blocks, m: Mino): boolean => {\r\n\r\n    for (let block of m.blocks) {\r\n        if (b[block[1]]?.[block[0]] === undefined || b[block[1]][block[0]]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const getNewMino = (type: minoType, ox = 0, oy = 0): Mino => {\r\n    let blocks = minoTypes[type].map(block => [ox + block[0], oy + block[1]] as [number, number]);\r\n\r\n    return {\r\n        blocks: blocks,\r\n        type: type,\r\n        perm: 0,\r\n        ox: ox,\r\n        oy: oy\r\n    }\r\n}\r\n\r\nexport const getMovedMino = (m: Mino, x: number, y: number) : Mino => {\r\n    const newBlocks = m.blocks.map(block => [block[0] + x, block[1] + y] as [number, number])\r\n    return {\r\n        ...m,\r\n        blocks: newBlocks,\r\n        ox: m.ox + x,\r\n        oy: m.oy + y\r\n    }\r\n}\r\n\r\nexport const getRotatedMino = (m: Mino, n: number) : Mino => {\r\n    const numRotations = ((n % 4) + 4) % 4\r\n    let newBlocks = m.blocks;\r\n\r\n    for (let i = 0; i < numRotations; i++){\r\n        newBlocks = newBlocks.map((block => [(block[1] - m.oy) + m.ox, -(block[0] - m.ox) + m.oy] as [number, number]))\r\n    }\r\n\r\n    return {\r\n        ...m,\r\n        blocks: newBlocks,\r\n        perm: (m.perm + numRotations) % 4\r\n    }\r\n}\r\n\r\nexport const lowest = (b: Blocks, m: Mino): Mino => {\r\n    let i = -1\r\n    let tempMino = getMovedMino(m, 0, i);\r\n\r\n    while (!collide(b, tempMino)){\r\n        i--;\r\n        tempMino = getMovedMino(m, 0, i);\r\n    }\r\n\r\n    return getMovedMino(m, 0, i + 1);\r\n}\r\n\r\nexport const drawMino = (ctx: CanvasRenderingContext2D, m: Mino) => {\r\n    const blocksheetSprite = new Image();\r\n    blocksheetSprite.src = blocksheet;\r\n\r\n    const heightOffset = ctx.canvas.height / blocksize - 1; \r\n\r\n    for (let block of m.blocks) {\r\n        ctx.drawImage(\r\n            blocksheetSprite,\r\n            blocksize * minoIndexes[m.type as keyof typeof minoIndexes],\r\n            0,\r\n            blocksize,\r\n            blocksize, \r\n            block[0] * blocksize,\r\n            (heightOffset - block[1]) * blocksize,\r\n            blocksize,\r\n            blocksize\r\n        );\r\n    }\r\n}\r\n\r\nexport const getShuffledQueue = (): minoType[] => {\r\n    //Fisher-Yates shuffle\r\n    let base = ['T', 'I', 'O', 'L', 'J', 'S', 'Z'] as minoType[];\r\n    let remaining = base.length;\r\n    \r\n    let i;\r\n    while (remaining){\r\n        i = Math.floor(Math.random() * remaining--);\r\n        [base[remaining], base[i]] = [base[i], base[remaining]];\r\n    }\r\n\r\n    return base;\r\n}\r\n\r\n// used for drawing in hold and queue:\r\nexport const getMinoWidth = (m: Mino): number => {\r\n    const seen: number[] = [];\r\n    m.blocks.forEach(block => {\r\n        if (!seen.includes(block[0])) {\r\n            seen.push(block[0]);\r\n        }\r\n    })\r\n    return seen.length;\r\n}\r\n\r\nexport const getMinoHeight = (m: Mino): number => {\r\n    const seen: number[] = [];\r\n    m.blocks.forEach(block => {\r\n        if (!seen.includes(block[1])) {\r\n            seen.push(block[1]);\r\n        }\r\n    })\r\n    return seen.length;\r\n}\r\n\r\nexport const getBoardWithPlacedMinos = (b: Blocks, minos: Mino[]): Blocks => {\r\n    \r\n    const new_b: Blocks = Array.from({ length: 4 }, () => Array(10).fill('')) // fills with blocks\r\n    // offset is to cover for if any lines are cleared in the middle of the solution\r\n    let offset = Array(4).fill(0);\r\n    const cleared = Array(4).fill(false)\r\n\r\n    for (let m of minos) {\r\n\r\n        for (let block of m.blocks) {\r\n            new_b[block[1] + offset[block[1]]][block[0]] = m.type;\r\n        }\r\n\r\n        // check if any lines have been cleared, if so, modify offset appropriately\r\n        let new_offset = offset.slice()\r\n\r\n        for (let row = 3; row >= 0; row--) {\r\n            if (!cleared[row]) {\r\n                let sum = 0;\r\n                for (let block = 0; block < 10; block++) {\r\n                    if (b[row][block] !== '' || new_b[row][block] !== '') {\r\n                        sum++;\r\n                    }\r\n                }\r\n\r\n                if (sum === 10) {\r\n                    // modifying offset\r\n                    new_offset.splice(row - offset[row], 1)\r\n                    for (let i = row - offset[row]; i < new_offset.length; i++) {\r\n                        new_offset[i]++;\r\n                    }\r\n                    new_offset.push(new_offset[new_offset.length - 1])\r\n                    cleared[row] = true\r\n                }\r\n            }\r\n        }\r\n\r\n        offset = new_offset.slice()\r\n    }\r\n\r\n    return new_b;\r\n}","// // eslint-disable-next-line no-restricted-globals\r\n// const ctx: Worker = self as any;\r\n\r\n// // Respond to message from parent thread\r\n// ctx.addEventListener(\"message\", (event) => console.log(event));\r\n\r\nimport { minoTypes, srsOffsets } from '../constants/minodata'\r\nimport { getBoardWithPlacedMinos } from './util';\r\n\r\ntype minoType = 'I' | 'O' | 'T' | 'L' | 'J' | 'Z' | 'S';\r\n\r\ninterface Mino {\r\n    blocks: [number, number][],\r\n    type: minoType;\r\n    perm: number;\r\n    ox: number,\r\n    oy: number,\r\n}\r\n\r\ntype blockType = minoType | 'G' | ''\r\n\r\ntype Blocks = blockType[][]\r\n\r\nconst getNewMino = (type: minoType, ox = 0, oy = 0): Mino => {\r\n    let blocks = minoTypes[type].map(block => [ox + block[0], oy + block[1]] as [number, number]);\r\n\r\n    return {\r\n        blocks: blocks,\r\n        type: type,\r\n        perm: 0,\r\n        ox: ox,\r\n        oy: oy\r\n    }\r\n}\r\n\r\nconst getMovedMino = (m: Mino, x: number, y: number) : Mino => {\r\n    const newBlocks = m.blocks.map(block => [block[0] + x, block[1] + y] as [number, number])\r\n    return {\r\n        ...m,\r\n        blocks: newBlocks,\r\n        ox: m.ox + x,\r\n        oy: m.oy + y\r\n    }\r\n}\r\n\r\nconst getRotatedMino = (m: Mino, n: number) : Mino => {\r\n    const numRotations = ((n % 4) + 4) % 4\r\n    let newBlocks = m.blocks;\r\n\r\n    for (let i = 0; i < numRotations; i++){\r\n        newBlocks = newBlocks.map((block => [(block[1] - m.oy) + m.ox, -(block[0] - m.ox) + m.oy] as [number, number]))\r\n    }\r\n\r\n    return {\r\n        ...m,\r\n        blocks: newBlocks,\r\n        perm: (m.perm + numRotations) % 4\r\n    }\r\n}\r\n\r\nconst collide = (b: Blocks, m: Mino): boolean => {\r\n    for (let block of m.blocks) {\r\n        if (b[block[1]]?.[block[0]] === undefined || b[block[1]][block[0]]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction topless_collide(b: Blocks, m: Mino): boolean{ // collide that doesn't trigger on top undefined\r\n    for (let block of m.blocks) {\r\n        if (block[1] >= b.length && (0 <= block[0] && block[0] < 10)) {}\r\n        else if (b[block[1]]?.[block[0]] === undefined || b[block[1]][block[0]]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst setMultipleBlocks = (b: Blocks, blocklist: [number, number][], type: blockType) => {\r\n    let tempBlocks = JSON.parse(JSON.stringify(b)) as Blocks;\r\n    \r\n    for (let block of blocklist) {\r\n        if (block[0] < 10 && block[1] < 4) {\r\n            tempBlocks[block[1]][block[0]] = type;\r\n        }\r\n    }\r\n\r\n    // check to clear lines:\r\n    for (let i = 0; i < tempBlocks.length; i++){\r\n        if (!tempBlocks[i].includes('')) {\r\n            tempBlocks.splice(i, 1);\r\n            // tempBlocks.push(Array(10).fill(''));\r\n            i--;\r\n        }\r\n    }\r\n\r\n    return tempBlocks;\r\n}\r\n\r\n// when it gets input from the main file, run everything else.\r\n// state.data has b (2d Array of Chars), curr (Char), hold (Char), queue (Array of Chars)\r\nonmessage = (msg: MessageEvent) => {\r\n    console.log('message received');\r\n    const state: {b: Blocks, hold: minoType, queue: minoType[]} = msg.data;\r\n\r\n    // if hold exists, append current mino to beginning of queue, otherwise make current mino held\r\n    let new_queue = [...state.queue];\r\n    let new_hold: minoType | undefined;\r\n\r\n    if (state.hold != null) {\r\n        new_hold = state.hold; \r\n    }\r\n    else {\r\n        new_hold = new_queue.shift();\r\n    }\r\n\r\n    const stackHeight = state.b.reduce((acc, row, i) => {\r\n        if (row.some(block => block !== '')) {\r\n            return i + 1;\r\n        } else {\r\n            return acc;\r\n        }\r\n    }, 0);\r\n    \r\n    const new_b = JSON.parse(JSON.stringify(state.b)).slice(0, Math.max(stackHeight, 4)); \r\n\r\n    let solutions: Mino[][];\r\n    if (!new_hold || stackHeight === 0) {\r\n        solutions = [];\r\n    } else {\r\n        solutions = getAllPCs(new_b, new_queue, new_hold);\r\n    }\r\n\r\n    solutions = eliminate_duplicate_solutions(new_b, solutions);\r\n\r\n    postMessage(solutions);\r\n\r\n    console.log('finished.')\r\n}\r\n\r\nfunction getAllPCs(b: Blocks, queue: minoType[], hold: minoType): Mino[][] {\r\n    let result = [] as Mino[][];\r\n\r\n    for (let h = 1; h < 5; h++){\r\n        if (is_pcable(b, queue, h)){\r\n            // console.log(`searching for ${h}-height pcs...`)\r\n            result = [...result, ...getAllPCsByHeight(b, queue, hold, h)]; \r\n        }\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\nfunction is_pcable(b: Blocks, queue: minoType[], height=4): boolean{// check if board is pc-able given queue\r\n    // check if board height is higher than pc height\r\n    for (let i = height; i < b.length; i++){        \r\n        for (let block of b[i]){\r\n            if (block) {\r\n                // console.log(`Board height is higher than ${height}!`)\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // check if number of empty spaces on board is divisible by 4\r\n    let empty_blocks = 0;\r\n    for (let row of b){        \r\n        empty_blocks += row.reduce((acc, block) => acc += (block === '' ? 1 : 0), 0);\r\n    }\r\n    if (empty_blocks % 4 !== 0) {\r\n        // console.log('Remaining space is not divisible by 4!')\r\n        return false;\r\n    }\r\n\r\n    // check if queue length is long enough to pc\r\n    if (empty_blocks / 4 > queue.length) {\r\n        // console.log('Queue is not long enough!')\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction is_lowest(b: Blocks, m: Mino){\r\n    for (let block of m.blocks){\r\n        if (block[1] === 0){\r\n            return true;\r\n        } \r\n        else if (b[block[1] - 1][block[0]]){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction get_all_lowest(b: Blocks, type: minoType, height=4): Mino[] {\r\n    let result = [];\r\n\r\n    for (let perm = 0; perm < 4; perm++){\r\n        for (let x = 0; x < 10; x++){\r\n            for (let y = 0; y < height; y++){\r\n                const tempmino = getRotatedMino(getNewMino(type, x, y), perm);\r\n                if (!collide(b, tempmino) && is_lowest(b, tempmino) && is_reachable(b, tempmino, 0)){\r\n                    result.push(tempmino);\r\n                }\r\n            }\r\n        }\r\n        if (type === 'O' && perm > 0) break;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction is_reachable(b: Blocks, m: Mino, iter=0): boolean {\r\n    // check if we've already done too much iterations of this, currently set to maximum 3 but can add more\r\n    if (iter > 4){\r\n        return false;\r\n    }\r\n\r\n    // check if the mino is already collided with the board\r\n    // this is collide() from main file, modified so blocks above board don't trigger collision\r\n    if (topless_collide(b, m)){\r\n        return false;\r\n    }\r\n\r\n    // check if it can just go straight up\r\n    let can_go_up = true;\r\n    for (let block of m.blocks){\r\n        if (can_go_up){\r\n            for (let i = 0; i < b.length; i++){\r\n                if (b[block[1] + i]?.[block[0]]){\r\n                    can_go_up = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else break;\r\n    }\r\n    if (can_go_up) return true;\r\n\r\n    // check each dir: up, left, right (no down)\r\n    if (is_reachable(b, getMovedMino(m, 0, 1), iter + 1) ||\r\n        is_reachable(b, getMovedMino(m, -1, 0), iter + 1) ||\r\n        is_reachable(b, getMovedMino(m, 1, 0), iter + 1)) {\r\n        return true;\r\n    }\r\n    // check each rotation, don't check if O piece\r\n    else if (m.type !== 'O'){\r\n        for (let rot = 1; rot < 4; rot++) {\r\n            // check each offset:\r\n            for (let os = 0; os < 5; os++) {\r\n                // setting up the offset values\r\n                let oldperm = (m.perm + rot + 4) % 4\r\n                let offset = [\r\n                    srsOffsets[m.type][oldperm][os][0] - srsOffsets[m.type][m.perm][os][0],\r\n                    srsOffsets[m.type][oldperm][os][1] - srsOffsets[m.type][m.perm][os][1]\r\n                ] as [number, number];\r\n                \r\n                // create copy of m, rotate it, and apply reversed offset\r\n                const possibleOldMino = getRotatedMino(getMovedMino(m, -offset[0], -offset[1]), rot); \r\n                \r\n                if (!topless_collide(b, possibleOldMino)) {\r\n                    // rotate the possible old mino to check if the spin is actually what happens\r\n                    const currOffset = srsOffsets[possibleOldMino.type];\r\n                    const rotatedOldMino = getRotatedMino(possibleOldMino, -rot + 4); // -rot + 4 undoes rotation\r\n\r\n                    for (let i = 0; i < currOffset[possibleOldMino.perm].length; i++) {\r\n                        const offset = [\r\n                            currOffset[possibleOldMino.perm][i][0] - currOffset[rotatedOldMino.perm][i][0],\r\n                            currOffset[possibleOldMino.perm][i][1] - currOffset[rotatedOldMino.perm][i][1]\r\n                        ]\r\n                        const offsetMino = getMovedMino(rotatedOldMino, offset[0], offset[1])\r\n\r\n                        // check if the rotated old mino becomes the mino we want\r\n                        if (!topless_collide(b, offsetMino)) {\r\n                            if (offsetMino.ox === m.ox && offsetMino.oy === m.oy &&\r\n                                is_reachable(b, possibleOldMino, iter + 1)) {\r\n                                return true;\r\n                            } else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getAllPCsByHeight(b: Blocks, queue: minoType[], hold: minoType, height: number = 4): Mino[][] {\r\n\r\n    interface State {\r\n        blocks: Blocks,\r\n        queue: minoType[],\r\n        hold: minoType,\r\n        history: Mino[],\r\n    }\r\n\r\n    const searchQueue: State[] = [{\r\n        blocks: b,\r\n        queue: queue,\r\n        hold: hold,\r\n        history: []\r\n    }];\r\n    const result: Mino[][] = [];\r\n\r\n    while (searchQueue.length > 0) {\r\n        const currState = searchQueue.shift()!;\r\n        const new_b = currState.history.length > 0 ? \r\n        setMultipleBlocks(\r\n            currState.blocks, \r\n            currState.history[currState.history.length - 1].blocks, \r\n            currState.history[currState.history.length - 1].type\r\n        ) :\r\n        JSON.parse(JSON.stringify(currState.blocks)) as Blocks;\r\n\r\n        if (new_b.length === 0) {\r\n            result.push(currState.history);\r\n\r\n            // if (result.length % 10 === 0) console.log(`found ${result.length} solutions...`);\r\n        } else {\r\n            if (currState.queue.length <= 0 && currState.hold === null) {\r\n                // pass\r\n            }\r\n            // else if (seen_boards.includes(JSON.stringify([queue[0], ...new_b.blocks]))){\r\n            //     // pass\r\n            // }\r\n            else {\r\n                // seen_boards.push(JSON.stringify([queue[0], ...new_b.blocks]))\r\n\r\n                // current mino as next\r\n                for (let m of get_all_lowest(new_b, currState.queue[0], currState.blocks.length)) {\r\n                    searchQueue.push({\r\n                        blocks: new_b,\r\n                        queue: currState.queue.slice(1),\r\n                        hold: currState.hold,\r\n                        history: [...currState.history, m]\r\n                    })\r\n                }\r\n\r\n                // hold mino as next\r\n                for (let m of get_all_lowest(new_b, currState.hold, currState.blocks.length)) {\r\n                    searchQueue.push({\r\n                        blocks: new_b,\r\n                        queue: currState.queue.slice(1),\r\n                        hold: currState.queue[0],\r\n                        history: [...currState.history, m]\r\n                    })\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction eliminate_duplicate_solutions(b: Blocks, sols: Mino[][]): Mino[][] {\r\n    let new_sols = []; \r\n    let seen = []; \r\n\r\n    for (let s of sols){\r\n\r\n        let new_b = getBoardWithPlacedMinos(b, s);\r\n\r\n        let was_seen = false; \r\n        for (let arrangement of seen){\r\n            if (JSON.stringify(new_b) === JSON.stringify(arrangement)) {\r\n                was_seen = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!was_seen){\r\n            seen.push(new_b);\r\n            new_sols.push(s);\r\n        }\r\n    }\r\n\r\n    return new_sols;\r\n}\r\n\r\nexport {}"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_toConsumableArray","isArray","iter","Symbol","iterator","TypeError","allowArrayLike","it","F","s","done","value","e","_e","f","err","normalCompletion","didErr","step","next","_e2","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","minoTypes","srsOffsets","I","O","T","L","J","Z","S","getBoardWithPlacedMinos","b","minos","new_b","fill","offset","cleared","m","blocks","block","type","new_offset","row","sum","splice","getNewMino","ox","oy","map","perm","getMovedMino","x","y","newBlocks","getRotatedMino","numRotations","collide","undefined","topless_collide","setMultipleBlocks","blocklist","tempBlocks","JSON","parse","stringify","includes","is_pcable","queue","height","empty_blocks","reduce","acc","is_lowest","get_all_lowest","result","tempmino","is_reachable","can_go_up","rot","os","oldperm","possibleOldMino","currOffset","rotatedOldMino","offsetMino","getAllPCsByHeight","hold","searchQueue","history","currState","shift","onmessage","msg","console","log","new_hold","state","data","new_queue","solutions","stackHeight","some","Math","max","sols","new_sols","seen","was_seen","arrangement","eliminate_duplicate_solutions","h","getAllPCs","postMessage"],"sourceRoot":""}